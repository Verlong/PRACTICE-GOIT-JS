// –ú–æ–¥—É–ª—å 3. –ó–∞–Ω—è—Ç—Ç—è 1. –û–±'—î–∫—Ç–∏
// 1. –ü—Ä–æ–∫–æ–º–µ–Ω—Ç—É–π —è–∫ –ø–æ–≤–æ–¥—è—Ç—å —Å–µ–±–µ –ø—Ä–∏–º—ñ—Ç–∏–≤–Ω—ñ —Ç–∞ —Å–∫–ª–∞–¥–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö.
// ü§ì start with strings, numbers and booleans
// let age = 100;
// let age2 = age;
// // console.log(age, age2);

// age = 200;
// // console.log(age, age2);

// let name = 'Wes';
// let name2 = name;
// // console.log(name, name2);
// name = 'Wesley';
// // console.log(name, name2);
// // ü§ì Let's say we have an array
// const players = ['Wes', 'Sarah', 'Ryan', 'Poppy'];

// // that is an array reference, not an array copy
// const team = players;
// // console.log(players, team);
// // console.log(players === team);

// team[3] = 'Lux';
// // console.log(players, team);

// // üöÄ 4 different ways to copy array
// const team2 = players.slice();
// const team3 = [].concat(players);
// const team4 = [...players];
// const team5 = Array.from(players);
// // console.log(team === team2 || team === team3 || team === team4 || team === team4);

// team4[3] = 'heeee hawww';
// // console.log(team4);
// // ü§ì with Objects
// const person = {
//   name: 'Wes',
//   age: 100,
//   social: {
//     facebook: 'wesbos.developer',
//   },
// };

// const captain = person;
// // console.log(captain, person);
// // console.log(captain === person);

// captain.number = 99;
// // console.log(captain, person);

// // üöÄ 2 ways how to make only 1 level deep copy (SHALLOW COPY)
// const shallow1 = Object.assign({}, person);
// const shallow2 = { ...person };
// // console.log(captain === shallow1 || captain === shallow2);

// shallow1.social.instagram = 'wesbos.dev';
// // console.log(person, shallow1)

// // üöÄ 3 ways how to make a DEEP COPY of an object with all levels of nesting
// const deep1 = JSON.parse(JSON.stringify(wes));
// const deep2 = structuredClone(wes);
// const deep3 = _.cloneDeep(obj); // https://www.geeksforgeeks.org/lodash-_-clonedeep-method/

// deep1.social.twitter = '@wesbos';
// // console.log(person, deep1)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// 2. –ü—Ä–∞–∫—Ç–∏–∫–∞ –±–∞–∑–æ–≤–∏—Ö –¥—ñ–π –Ω–∞–¥ –æ–±'—î–∫—Ç–æ–º
// –°—Ç–≤–æ—Ä–∏ 2 –æ–∫—Ä–µ–º—ñ –∑–º—ñ–Ω–Ω—ñ firstName —ñ lastName —ñ –∑–∞–¥–æ–ø–æ–º–æ–≥–æ—é promt –ø–æ–ø—Ä–æ—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ.
// –ó–º—ñ–Ω–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ firstName –Ω–∞ —è–∫–µ—Å—å —ñ–Ω—à–µ
// –°—Ç–≤–æ—Ä–∏ –æ–±'—î–∫—Ç user —ñ –∑–∞–Ω–µ—Å–∏ –≤ –Ω—å–æ–≥–æ –¥–∞–Ω—ñ —è–∫—ñ —Ç–∏ –æ—Ç—Ä–∏–º–∞–≤ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø—ñ—Å–ª—è —Ü—ñ—î—ó –¥—ñ—ó –≤ –æ–±'—î–∫—Ç—ñ user –º–∞—î –±—É—Ç–∏ 2 –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ.
// –í–∏–µ–¥–µ—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ lastName —É –∫–æ–Ω—Å–æ–ª—å 2 —Å–ø–æ—Å–æ–±–∞–º–∏.
// –°—Ç–≤–æ—Ä–∏ –∑–º—ñ–Ω–Ω—É const login = test@gmail.com
// –°—Ç–≤–æ—Ä–∏ –∑–º—ñ–Ω–Ω—É const password = test123
// –°—Ç–≤–æ—Ä–∏ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å auth, —ó—ó –∑–Ω–∞—á–µ–Ω–Ω—è–º –º–∞—î –±—É—Ç–∏ –æ–±'—î–∫—Ç –∑ 2 –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ login i password. –°–∫–æ—Ä–∏—Ç–∞–π—Å—è –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏
// –í–∏–µ–¥–µ—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ auth —É –∫–æ–Ω—Å–æ–ª—å.
// –°—Ç–≤–æ—Ä–∏ —É –æ–±'—î–∫—Ç—ñ user 2 –º–µ—Ç–æ–¥–∏: showUser() - —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –ø–æ—Ç–æ—á–Ω–∏–π –æ–±'—î–∫—Ç showFullName()- —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤–Ω–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

// const firstName = prompt('Input Name');
// const lastName = prompt('Input last name');
// const user = {
//   firstName: firstName,
//   lastName,
//   showUser() {
//     console.log(this);
//     console.log(user);
//   },
//   showFullName() {
//     console.log(this.firstName + ' ' + this.lastName);
//     console.log(user.firstName + user.lastName);
//   },
// };
// // user['firstName'] = 'Artem';
// user.firstName = 'Artem';
// const login = 'test@gmail.com';
// const password = 'test123';
// user.auth = {
//   login,
//   password,
// };
// user.showUser();
// user.showFullName();
//////////////////////////////////////////////////////////////////////////
// 3. –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é isBookAlreadyRead –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —á–∏—Ç–∞–Ω–Ω—è (—Ç–æ–±—Ç–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –∫–Ω–∏–≥–∏, —ñ–º–µ–Ω—ñ –∞–≤—Ç–æ—Ä–∞ —Ç–∞ —Å—Ç–∞—Ç—É—Å—É —á–∏—Ç–∞–Ω–Ω—è) –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–∏–≥.–ù–∞–ø—Ä–∏–∫–ª–∞–¥ "Already read " + "book" by author –∞–±–æ "You still need to read " + "book" by author
// const library = [
//   {
//     title: 'Bill Gates',
//     author: 'The Road Ahead',
//     readingStatus: true,
//   },
//   {
//     title: 'Steve Jobs',
//     author: 'Walter Isaacson',
//     readingStatus: true,
//   },
//   {
//     title: 'Mockingjay: The Final Book of The Hunger Games',
//     author: 'Suzanne Collins',
//     readingStatus: false,
//   },
// ];
// function isBookAlreadyRead(dataLibrary) {
//   for (const book of dataLibrary) {
//     console.log(book);
//     continue;
//   }
//   if (book.readingStatus) {
//     console.log(`Already read ${book.title} by autor ${book.author}`);
//   }
// }
/////////////////////////////////////////////////////////////////////////////////
// –í–∏–≤–æ–¥—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ name: $salary
// const salaries = {
//   Jack: 24000,
//   Paul: 34000,
//   Monica: 55000,
// };
// for (const key in salaries) {
//    salaries[key] = `$${salaries[key]}`;

// }
//     console.log(salaries);
///////////////////////////////////////////////////////////////////////
// 5. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findBestEmployee(employees),
// —è–∫–∞ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–º'—è –Ω–∞–π–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—à–æ–≥–æ
//     (—è–∫–∏–π –≤–∏–∫–æ–Ω–∞–≤ –Ω–∞–π–±—ñ–ª—å—à–µ –∑–∞–≤–¥–∞–Ω—å).
//     –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ —ñ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –º—ñ—Å—Ç—è—Ç—å—Å—è
//     —è–∫ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –æ–±'—î–∫—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ "—ñ–º'—è": "–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å".
//////////////////////////////////////////////////////////////////////////
// function findBestEmployee(employees) {}
// console.log(
//   findBestEmployee({
//     ann: 29,
//     david: 35,
//     helen: 1,
//     lorence: 99,
//   }),
// ); // lorence

// console.log(
//   findBestEmployee({
//     poly: 12,
//     mango: 17,
//     ajax: 4,
//   }),
// ); // mango
////////////////////////////////////////////////////////////////////////
// 9. ‚≠êÔ∏è ‚≠êÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é checkLineForContentOfTwoIdenticalChars, —è–∫–∞ –ø—Ä–∏–π–º–∞—Ç–∏–º—É –Ω–∞–±—ñ—Ä —Ä—è–¥–∫—ñ–≤ —ñ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏–º–µ –º–∞—Å–∏–≤ –ª–∏—à–µ –∑ —Ç–∏–º–∏ —Ä—è–¥–∫–∞–º–∏, –≤ —è–∫–∏—Ö –±—É–¥—å-—è–∫–∞ –±—É–∫–≤–∞ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–ª–∞—Å—å –ª–∏—à–µ 2 —Ä–∞–∑–∏.
// Input: "asdf", "fdas", "asds", "d fm", "dfaa", "aaaa", "aabb", "aaabb" Output: 'asds', 'dfaa', 'aabb', 'aaabb'

///////////////////////////////////////////////////////////////////////////
// 6. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getAllPropValues(arr, prop), —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ —Ç–∞ —ñ–º'—è –∫–ª—é—á–∞. –ü–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∑–Ω–∞—á–µ–Ω—å –ø–µ–≤–Ω–æ–≥–æ –ø–æ–ª—è prop –∫–æ–∂–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞ –≤ –º–∞—Å–∏–≤—ñ.
// const users = [
//   {
//     firstName: 'Mark',
//     lastName: 'G.',
//     country: 'Scotland',
//     age: 22,
//     language: 'JavaScript',
//   },
//   {
//     firstName: 'Victoria',
//     lastName: 'T.',
//     country: 'Puerto Rico',
//     continent: 'Americas',
//     age: 30,
//     language: 'Python',
//   },
//   {
//     firstName: 'Emma',
//     lastName: 'B.',
//     country: 'Norway',
//     age: 19,
//     language: 'Java',
//   },
// ];
// function getAllPropValues(arr, prop) {
//   const result = [];
//   for (const arrItem of arr) {
//       if (arrItem[prop]) {
//           result.push(arrItem[prop]);
//     }
//     }
//     return result;
// }

// console.log(getAllPropValues(users, 'firstName')); // ["Mark", "Victoria", "Emma"]
// console.log(getAllPropValues(users, 'language')); // ["JavaScript", "Python", "Java"]
// console.log(getAllPropValues(users, 'hobby')); // []
//////////////////////////////////////////////////////////////////////////////////////////////////
// 7. –Ñ –º–∞—Å–∏–≤ data —ñ –≤ –Ω—å–æ–º—É –¥—É–±–ª—é—é—Ç—å—Å—è –µ–ª–µ–º–µ–Ω—Ç–∏. –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é sumUpTheInstances, —è–∫–∞ –±—É–¥–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –æ–±'—î–∫—Ç, —è–∫–∏–π –±—É–¥–µ –º—ñ—Å—Ç–∏ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å, –¥–µ –∫–ª—é—á–µ–º –±—É–¥–µ —É–Ω—ñ–∫–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, –∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º –±—É–¥–µ —á–∏—Å–ª–æ, —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑ –≤–æ–Ω–æ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–ª–æ—Å—å —É –º–∞—Å–∏–≤—ñ.
// –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: const obj = { apple: 2, banana: 2, avocado: 1, cherry:1 }

// const products = ['apple', 'apple', 'banana', 'banana', 'avocado', 'cherry'];
// function sumUpTheInstances(products) {
//   const result = {};
//   for (const product of products) {
//     if (result[product]) {
//       result[product] += 1;
//     } else {
//       result[product] = 1;
//     }
//   }
//   return result;
// }
//////////////////////////////////////////////////////////////////////////
